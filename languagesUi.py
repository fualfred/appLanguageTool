# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'languagesUi.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox, QComboBox
from PyQt5.Qt import QWidget
from utils import Utils as uts
from handle import Handle
import os


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(594, 296)
        MainWindow.setMinimumSize(QtCore.QSize(594, 296))
        MainWindow.setMaximumSize(QtCore.QSize(594, 296))
        MainWindow.setSizeIncrement(QtCore.QSize(594, 296))
        font = QtGui.QFont()
        font.setFamily("Arial")
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 130, 71, 16))

        font = QtGui.QFont()
        font.setFamily("宋体")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(120, 130, 81, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(280, 130, 121, 16))
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(410, 130, 81, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(50, 10, 71, 41))
        self.label_4.setFont(font)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(40, 20, 111, 16))
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(160, 20, 271, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(450, 20, 71, 23))
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(180, 230, 111, 31))
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        # self.label_7 = QtWidgets.QLabel(self.centralwidget)
        # self.label_7.setGeometry(QtCore.QRect(40, 180, 231, 16))
        # font = QtGui.QFont()
        # font.setFamily("宋体")
        # font.setPointSize(14)
        # self.label_7.setFont(font)
        # self.label_7.setObjectName("label_7")
        # self.lineEdit_5 = QtWidgets.QLineEdit(self.centralwidget)
        # self.lineEdit_5.setGeometry(QtCore.QRect(270, 180, 231, 20))
        # self.lineEdit_5.setObjectName("lineEdit_5")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(40, 180, 231, 16))
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.combo = QComboBox(self.centralwidget)
        self.combo.addItems(["Android", "IOS"])
        self.combo.setGeometry(QtCore.QRect(270, 180, 231, 20))
        self.combo.setObjectName("combo")

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(440, 60, 75, 23))
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4.setGeometry(QtCore.QRect(190, 60, 231, 20))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 60, 191, 16))
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(60, 40, 181, 41))
        self.label_3.setFont(font)
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(450, 100, 75, 23))
        self.pushButton_4.setFont(font)
        self.pushButton_4.setObjectName("pushButton_4")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(40, 100, 191, 16))
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(60, 80, 181, 41))
        self.label_9.setFont(font)
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_6.setGeometry(QtCore.QRect(210, 100, 231, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        # 点击事件
        self.pushButton_4.clicked.connect(self.btn_scan_file)
        self.pushButton_2.clicked.connect(self.btn_scan_file)
        self.pushButton.clicked.connect(self.execute)
        self.pushButton_3.clicked.connect(self.btn_scan_file)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CLT"))
        self.label.setText(_translate("MainWindow", "英文列"))
        self.label_2.setText(_translate("MainWindow", "测试列"))
        self.label_5.setText(_translate("MainWindow", "选择Excel"))
        self.pushButton_3.setText(_translate("MainWindow", "浏览"))
        self.pushButton.setText(_translate("MainWindow", "执行检查"))
        self.label_7.setText(_translate("MainWindow", "选择android/IOS"))
        self.pushButton_2.setText(_translate("MainWindow", "浏览"))
        self.label_6.setText(_translate("MainWindow", "选择测试资源文件"))
        self.pushButton_4.setText(_translate("MainWindow", "浏览"))
        self.label_8.setText(_translate("MainWindow", "选择英文资源文件"))

    def btn_scan_file(self):
        file_name, file_type = QFileDialog.getOpenFileName(self, '选择文件', '.', "All Files(*)")
        # print(file_name)
        sender = self.sender()
        if sender == self.pushButton_3:
            self.lineEdit_3.setText(file_name)
        elif sender == self.pushButton_2:
            self.lineEdit_4.setText(file_name)
        else:
            self.lineEdit_6.setText(file_name)

    def get_input_text(self):
        text_list = []
        excel_path = self.lineEdit_3.text()
        text_list.append(excel_path)
        test_language_xml_path = self.lineEdit_4.text()
        text_list.append(test_language_xml_path)
        en_language_xml_path = self.lineEdit_6.text()
        text_list.append(en_language_xml_path)
        # key = int(self.lineEdit.text().strip())
        key_name = self.lineEdit.text().strip().upper()
        text_list.append(key_name)
        # test_key = int(self.lineEdit_2.text().strip())
        test_key_name = self.lineEdit_2.text().strip().upper()
        text_list.append(test_key_name)
        # platform = self.combo.currentIndex()
        # text_list.append(platform)
        return text_list

    def run_android(self):
        handle = Handle()
        text_list = self.get_input_text()
        excel_wb = uts.get_wb_exist(text_list[0])
        # (excel_wb)
        excel_wb_sheet_exist = uts.get_excel_sheet(excel_wb, 0)
        # print(excel_wb_sheet_exist)
        # excel_wb_sheet = uts.get_excel_sheet(excel_wb, 0)
        init_report_data = ["英文文案", "英文文案所在行", "英文Key", "多语言预期文案", "英文KEY是否在多语言文件", "多语言实测文案", "测试结果", "备注", "不同之处标记"]
        init_num = 1
        fill_col = len(init_report_data)-2
        if os.path.exists("report.xlsx"):
            excel_report_wb = uts.get_wb_exist("report.xlsx")
            excel_report_sheet = excel_report_wb.create_sheet()
        else:

            excel_report_wb = uts.create_excel_sheet()
            excel_report_sheet = uts.get_excel_sheet(excel_report_wb, 0)
        # for i in range(1, fill_col + 1):
        #     excel_report_sheet.column_dimensions[i].auto_size = True
        uts.write_sheet(excel_report_sheet, init_report_data)
        en_root = uts.get_xml_root(text_list[2])
        test_root = uts.get_xml_root(text_list[1])
        excel_max = uts.get_sheet_row(excel_wb_sheet_exist)
        print(excel_max)
        key_index = text_list[3]
        test_index = text_list[4]
        # (text_list)
        # print(excel_max)
        try:
            for i in range(3, excel_max):
                # en_value = uts.get_cell_value(excel_wb_sheet_exist, i, key_index)
                # ck_value = uts.get_cell_value(excel_wb_sheet_exist, i, test_index)
                en_value = uts.get_cell_by_col_name(excel_wb_sheet_exist, key_index, i)
                # print(en_value)
                if self.is_ok(en_value):
                    en_value = en_value.replace("\'", "\\'")
                    # print(en_value)
                ck_value = uts.get_cell_by_col_name(excel_wb_sheet_exist, test_index, i)
                # print(en_value, ck_value)
                result_data = list()
                get_value = None
                if en_value:
                    new_en_value = str(en_value).strip()
                    new_ck_value = str(ck_value).strip()
                    print(new_en_value)
                    en_keys = uts.get_key_by_value(en_root, new_en_value)
                    # print(en_keys)
                    if len(en_keys) == 0:
                        result = "BLOCK"
                        result_data = handle.handle_result_data(new_en_value.replace("\\", ""), i, "-英文Key找不到-", new_ck_value,
                                                                "-英文Key在多语言文件找不到-", "找不到对应的KEY,获取不到文案", result, "请检查英文文案", "No")
                        # print(result_data)
                        uts.write_sheet(excel_report_sheet, result_data)
                        init_num += 1
                        uts.fill_color(excel_report_sheet, init_num, fill_col, result)
                    else:
                        for key in en_keys:
                            is_exist = uts.is_attr_name_exist(test_root, key)
                            if is_exist:
                                get_value = uts.get_attrib_value(test_root, key)
                                result = handle.handle_data(get_value, new_ck_value)
                                ck_key = key
                                remark = "无"
                            else:
                                result = "BLOCK"
                                ck_key = "-英文Key在多语言文件找不到-"
                                get_value = "找不到对应的KEY,获取不到文案"
                                remark = "请检查多语言是否翻译"
                            if "\\'" in get_value:
                                d_get_value = get_value.replace("\\", "")
                            else:
                                d_get_value = get_value
                            differ = uts.get_difference(result, new_ck_value, d_get_value)
                            result_data = handle.handle_result_data(new_en_value.replace("\\", ""), i, key, new_ck_value, ck_key,
                                                                    get_value, result, remark, differ)
                            uts.write_sheet(excel_report_sheet, result_data)
                            init_num += 1
                            uts.fill_color(excel_report_sheet, init_num, fill_col, result)
                            # print(result_data)

                else:
                    continue
        except Exception as e:
            print(e)
        uts.save_wb(excel_report_wb, "report.xlsx")
        # print("######")
        QMessageBox.about(self, "消息提示", "检查完成！")

    def execute(self):
        if self.combo.currentIndex() == 0:
            self.run_android()
        if self.combo.currentIndex() == 1:
            self.run_ios()

    def is_ok(self, str_is):
        try:
            if str_is is not None and "\'" in str_is:
                return True
            else:
                return False
        except Exception as e:
            print(e)
            return False

    def run_ios(self):
        handle = Handle()
        text_list = self.get_input_text()
        excel_wb = uts.get_wb_exist(text_list[0])
        # (excel_wb)
        excel_wb_sheet_exist = uts.get_excel_sheet(excel_wb, 0)
        # print(excel_wb_sheet_exist)
        # excel_wb_sheet = uts.get_excel_sheet(excel_wb, 0)
        init_report_data = ["英文文案", "英文文案所在行", "英文Key", "多语言预期文案", "英文KEY是否在多语言文件", "多语言实测文案", "测试结果", "备注", "不同之处标记"]
        init_num = 1
        fill_col = len(init_report_data)-2
        if os.path.exists("report.xlsx"):
            excel_report_wb = uts.get_wb_exist("report.xlsx")
            excel_report_sheet = excel_report_wb.create_sheet()
        else:

            excel_report_wb = uts.create_excel_sheet()
            excel_report_sheet = uts.get_excel_sheet(excel_report_wb, 0)
        # for i in range(1, fill_col + 1):
        #     excel_report_sheet.column_dimensions[i].auto_size = True
        uts.write_sheet(excel_report_sheet, init_report_data)

        en_strings_value = uts.get_strings_flies_values(text_list[2])
        test_strings_value = uts.get_strings_flies_values(text_list[1])

        excel_max = uts.get_sheet_row(excel_wb_sheet_exist)
        print(excel_max)
        key_index = text_list[3]
        test_index = text_list[4]
        # (text_list)
        # print(excel_max)
        try:
            for i in range(3, excel_max):
                # en_value = uts.get_cell_value(excel_wb_sheet_exist, i, key_index)
                # ck_value = uts.get_cell_value(excel_wb_sheet_exist, i, test_index)
                en_value = uts.get_cell_by_col_name(excel_wb_sheet_exist, key_index, i)
                # print(en_value)
                if self.is_ok(en_value):
                    en_value = en_value.replace("\'", "\\'")
                    # print(en_value)
                ck_value = uts.get_cell_by_col_name(excel_wb_sheet_exist, test_index, i)
                # print(en_value, ck_value)
                result_data = list()
                get_value = None
                if en_value:
                    new_en_value = str(en_value).strip()
                    new_ck_value = str(ck_value).strip()
                    en_keys = uts.get_strings_key_by_vaule(en_strings_value, new_en_value)
                    # print(en_keys)
                    if len(en_keys) == 0:
                        result = "BLOCK"
                        result_data = handle.handle_result_data(new_en_value.replace("\\", ""), i, "-英文Key找不到-", new_ck_value,
                                                                "-英文Key在多语言文件找不到-", "找不到对应的KEY,获取不到文案", result, "请检查英文文案", "No")
                        # print(result_data)
                        uts.write_sheet(excel_report_sheet, result_data)
                        init_num += 1
                        uts.fill_color(excel_report_sheet, init_num, fill_col, result)
                    else:
                        for key in en_keys:
                            test_values = uts.get_strings_value_by_key(test_strings_value, key)
                            if len(test_values) != 0:
                                for get_value in test_values:
                                    result = handle.handle_data(get_value, new_ck_value)
                                    ck_key = key
                                    remark = "无"
                            else:
                                result = "BLOCK"
                                ck_key = "-英文Key在多语言文件找不到-"
                                get_value = "找不到对应的KEY,获取不到文案"
                                remark = "请检查多语言是否翻译"
                            if "\\'" in get_value:
                                d_get_value = get_value.replace("\\", "")
                            else:
                                d_get_value = get_value
                            differ = uts.get_difference(result, new_ck_value, d_get_value)
                            result_data = handle.handle_result_data(new_en_value.replace("\\", ""), i, key, new_ck_value, ck_key,
                                                                    get_value, result, remark, differ)
                            uts.write_sheet(excel_report_sheet, result_data)
                            init_num += 1
                            uts.fill_color(excel_report_sheet, init_num, fill_col, result)
                            # print(result_data)

                else:
                    continue
        except Exception as e:
            print(e)
        uts.save_wb(excel_report_wb, "report.xlsx")
        # print("######")
        QMessageBox.about(self, "消息提示", "检查完成！")
